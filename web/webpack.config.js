const path = require('path');

const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const LodashWebpackPlugin = require('lodash-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const StatoscopeWebpackPlugin = require('@statoscope/webpack-plugin').default;
const { BugsnagSourceMapUploaderPlugin } = require('webpack-bugsnag-plugins');
const { VanillaExtractPlugin } = require('@vanilla-extract/webpack-plugin');
const ReactRefreshPlugin = require('@pmmmwh/react-refresh-webpack-plugin');
const { dependencies: deps, version } = require('./package.json');

const BUILD_DIR = path.resolve(__dirname, './build');
const SVGR_DIR = path.resolve(__dirname, './src/assets/svg');
const HASH = Math.round(Date.now() / 1000).toString();

const isDevelopment = process.env.NODE_ENV === 'development';
const appVersion = `v${version}`;

const releaseStage = process.env.REACT_APP_RELEASE_STAGE ?? 'development';
const isProductionStage = releaseStage === 'production';
const ASSET_PATH =
  process.env.ASSET_PATH ?? (process.env.NODE_ENV === 'production' ? '/basestatic/' : '/');
const BUGSNAG_PUBLIC_PATH = `https://bitzlato.*${ASSET_PATH}`;
const PROXY_PROTOCOL = process.env.PROXY_PROTOCOL ?? 'https';

let marketDocsUrl = isDevelopment ? 'http://localhost:3004' : `${ASSET_PATH}marketDocs`; // production or staging
if (process.env.MARKET_DOCS_URL) {
  marketDocsUrl = process.env.MARKET_DOCS_URL; // e.g. http://localhost:3004
} else if (process.env.PROXY_HOST) {
  marketDocsUrl = `${PROXY_PROTOCOL}://${process.env.PROXY_HOST}/basestatic/marketDocs`; // for proxing
}

const features = {
  vanillaExtractDebug: isDevelopment && (process.env.VANILLA_EXTRACT_DEBUG ?? false),
};

/** @type {webpack.WebpackOptionsNormalized} */
module.exports = {
  mode: isDevelopment ? 'development' : 'production',

  bail: !isDevelopment,

  devtool: isDevelopment ? 'eval-cheap-module-source-map' : 'hidden-source-map',

  entry: {
    bundle: ['./src/publicPath.ts', './src/index.ts'],
  },

  output: {
    path: BUILD_DIR,
    filename: !isDevelopment ? '[name].[contenthash].js' : undefined,
    chunkFilename: '[id].[contenthash].js',
    globalObject: 'this',
    publicPath: 'auto',
    clean: true,
  },

  resolve: {
    extensions: ['.js', '.jsx', '.json', '.ts', '.tsx'],
    fallback: {
      buffer: require.resolve('buffer/'),
      events: require.resolve('events/'),
    },
  },

  module: {
    rules: [
      {
        test: /\.postcss$/,
        use: [
          isDevelopment ? 'style-loader' : MiniCssExtractPlugin.loader,
          {
            loader: 'dts-css-modules-loader',
            options: {
              namedExport: true,
            },
          },
          {
            loader: 'css-loader',
            options: {
              modules: {
                mode: 'local',
                localIdentName: isDevelopment
                  ? '[name]__[local]--[hash:base64:5]'
                  : '[hash:base64]',
                exportLocalsConvention: 'camelCaseOnly',
                exportGlobals: true,
              },
              importLoaders: 1,
            },
          },
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  [
                    require.resolve('postcss-preset-env'),
                    {
                      stage: 1,
                      features: {
                        'nesting-rules': false,
                      },
                      importFrom: ['src/styles/mediaQueries.css'],
                    },
                  ],
                  require.resolve('postcss-nested'),
                ],
              },
            },
          },
        ],
      },

      {
        test: /\.vanilla\.css$/i, // Targets only CSS files generated by vanilla-extract
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: 'css-loader',
            options: {
              url: false,
            },
          },
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [require.resolve('postcss-preset-env')],
              },
            },
          },
        ],
      },

      {
        test: /swagger-ui\.css$/,
        use: [
          isDevelopment ? 'style-loader' : MiniCssExtractPlugin.loader,
          {
            loader: 'css-loader',
            options: {
              url: false,
            },
          },
        ],
      },

      {
        test: /\.(css|sass|scss|pcss)$/,
        exclude: [/swagger-ui\.css$/, /\.vanilla\.css$/i],
        use: [
          isDevelopment ? 'style-loader' : MiniCssExtractPlugin.loader,
          'css-loader',
          'sass-loader',
          'postcss-loader',
        ],
      },

      {
        test: /\.tsx?$/,
        exclude: /node_modules/,
        use: {
          loader: 'swc-loader',
          options: {
            env: {
              mode: 'entry',
              coreJs: 3,
            },
            jsc: {
              target: 'es2015',
              parser: {
                syntax: 'typescript',
                tsx: true,
                decorators: false,
                dynamicImport: true,
              },
              transform: {
                react: {
                  runtime: 'automatic',
                  development: isDevelopment,
                  refresh: isDevelopment,
                },
              },
            },
          },
        },
      },

      {
        test: /\.svg$/i,
        issuer: /\.[jt]sx?$/,
        include: [SVGR_DIR],
        use: ['@svgr/webpack'],
      },

      {
        test: /\.(png|jpg|gif|ttf|eot|woff|woff2|svg)$/,
        exclude: [SVGR_DIR],
        type: 'asset',
        parser: {
          dataUrlCondition: {
            maxSize: 8 * 1024, // 8kb
          },
        },
      },
    ],
  },

  optimization: {
    runtimeChunk: isDevelopment ? 'single' : undefined,
    moduleIds: isDevelopment ? 'named' : 'deterministic',
    chunkIds: isDevelopment ? 'named' : 'deterministic',
    minimize: !isDevelopment,
    minimizer: !isDevelopment ? [`...`, new CssMinimizerPlugin()] : undefined,
  },

  plugins: [
    process.env.ANALYZE &&
      new StatoscopeWebpackPlugin({
        name: 'baseapp',
        saveStatsTo: 'statoscope-reports/stats-[name]-[hash].json',
      }),

    !isDevelopment &&
      new CopyWebpackPlugin({
        patterns: [{ from: 'public' }],
      }),

    new VanillaExtractPlugin({
      identifiers: features.vanillaExtractDebug ? 'debug' : 'short',
    }),

    new MiniCssExtractPlugin({
      filename: isDevelopment ? '[name].css' : '[name].[contenthash].css',
      chunkFilename: isDevelopment ? '[id].css' : '[id].[contenthash].css',
      ignoreOrder: true,
    }),

    process.env.REACT_APP_BUGSNAG_KEY &&
      isProductionStage &&
      BUGSNAG_PUBLIC_PATH &&
      new BugsnagSourceMapUploaderPlugin({
        apiKey: process.env.REACT_APP_BUGSNAG_KEY,
        appVersion,
        overwrite: true,
        publicPath: BUGSNAG_PUBLIC_PATH,
      }),

    new webpack.EnvironmentPlugin({
      ASSET_PATH,
      MOCK: false,
      BUILD_EXPIRE: null,
      HASH,
      REACT_APP_BUGSNAG_KEY: null,
      REACT_APP_BUGSNAG_VERSION: appVersion,
      REACT_APP_RELEASE_STAGE: 'development',
      REACT_APP_GIT_SHA: null,
      AUTH0_DOMAIN: null,
      AUTH0_CLIENT_ID: null,
    }),

    isDevelopment && new ReactRefreshPlugin(),

    new webpack.IgnorePlugin({
      resourceRegExp: /^\.\/locale$/,
      contextRegExp: /moment$/,
    }),

    new LodashWebpackPlugin({ shorthands: true, flattening: true }),

    new HtmlWebpackPlugin({
      template: './src/app/template.html',
      hash: true,
      publicPath: ASSET_PATH,
    }),

    new webpack.ProvidePlugin({
      Buffer: ['buffer', 'Buffer'],
    }),

    new webpack.container.ModuleFederationPlugin({
      name: 'shared',
      filename: 'shared.js',
      remotes: {
        marketDocs: `marketDocs@${marketDocsUrl}/marketDocs.js`,
      },
      exposes: {
        './standaloneComponents': './src/components/standalone/standaloneComponents',
        './Header': './src/components/shared/Header/Header',
        './Footer': './src/components/shared/Footer/Footer',
        './MobileFooter': './src/components/shared/MobileFooter/MobileFooter',
        './Box': './src/components/ui/Box',
        './Heading': './src/components/ui/Heading',
        './Stack': './src/components/ui/Stack',
        './Text': './src/components/ui/Text',
        './getThemeClassName': './src/theme/getThemeClassName',
        './AppContext': './src/components/app/AppContext',
        './Adapter': './src/components/shared/Adapter',
        './AdScreen': './src/components/shared/Ads/Ad/Ad',
        './BoardScreen': './src/components/shared/Ads/Board',
        './TraderScreen': './src/components/shared/Trader/Trader',
        './TradesScreen': './src/components/shared/Trades/Trades',
        './UserAdsScreen': './src/components/shared/UserAds/UserAds',
        './CreateAdScreen': './src/components/shared/CreateAd/CreateAd',
        './UserAdScreen': './src/components/shared/UserAd/UserAd',
        './WalletsStatScreen': './src/components/shared/WalletsStat/WalletsStat',
        './fetch': './src/helpers/fetch',
        './cssVars': './src/components/shared/sharedCssVars',
        './Trade': './src/components/shared/Trade/Trade',
      },
      shared: {
        react: { requiredVersion: deps.react, singleton: true },
        'react-dom': { requiredVersion: deps['react-dom'], singleton: true },
      },
    }),
  ].filter(Boolean),

  devServer: isDevelopment
    ? {
        compress: false,
        host: process.env.HOST ?? 'localhost',
        port: process.env.PORT ?? 8080,
        historyApiFallback: true,
        hot: true,
        proxy: process.env.PROXY_HOST
          ? {
              '/wss': {
                target: `wss://${process.env.PROXY_HOST}`,
                changeOrigin: true,
                ws: true,
                secure: false,
                onProxyReqWs: (proxyReq, _, socket) => {
                  proxyReq.removeHeader('origin');
                  proxyReq.setHeader('origin', `https://${process.env.PROXY_HOST}`);

                  socket.on('error', (error) => {
                    // eslint-disable-next-line no-console
                    console.error(error);
                  });
                },
              },
              '/api/v2/ranger': {
                target: `wss://${process.env.PROXY_HOST}`,
                changeOrigin: true,
                ws: true,
                secure: false,
                headers: { Connection: 'keep-alive' },
                onProxyReqWs: (proxyReq, _, socket) => {
                  proxyReq.removeHeader('origin');
                  proxyReq.setHeader('origin', `https://${process.env.PROXY_HOST}`);
                  socket.on('error', (error) => {
                    // eslint-disable-next-line no-console
                    console.error(error);
                  });
                },
              },
              '/api/private/v1/': {
                target: `${PROXY_PROTOCOL}://${process.env.PROXY_HOST}`,
                changeOrigin: true,
                cookieDomainRewrite: 'localhost',
                secure: false,
              },
              '/api/public/v1/': {
                target: `${PROXY_PROTOCOL}://${process.env.PROXY_HOST}`,
                changeOrigin: true,
                cookieDomainRewrite: 'localhost',
                secure: false,
              },
              '/api/p2p': process.env.PROXY_HOST
                ? {
                    target: `${PROXY_PROTOCOL}://${process.env.PROXY_HOST}`,
                    changeOrigin: true,
                    cookieDomainRewrite: 'localhost',
                    secure: false,
                  }
                : undefined,
              '/api/auth': process.env.PROXY_HOST
                ? {
                    target: `${PROXY_PROTOCOL}://${process.env.PROXY_HOST}`,
                    changeOrigin: true,
                    cookieDomainRewrite: 'localhost',
                    secure: false,
                  }
                : undefined,
              '/api': {
                target: `${PROXY_PROTOCOL}://${process.env.PROXY_HOST}`,
                changeOrigin: true,
                cookieDomainRewrite: 'localhost',
                secure: false,
              },
            }
          : undefined,
      }
    : undefined,
};
